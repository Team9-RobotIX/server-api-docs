FORMAT: 1A
HOST: http://18.219.63.23/production

# FloBot Server API
This document outlines the routes for the FloBot web server, stored on AWS. Most routes require the user to be authenticated.
Authentication is checked by validating the bearer token in `Authorization` header.

# Data Structures

## Delivery
+ id: `23` (required, number)
+ state (enum) - Represents the state of the delivery
    + IN_QUEUE - Delivery has not been started
    + IN_PROGRESS - Delivery is in transit
    + AWAITING_AUTHENTICATION - Waiting for user to authenticate with the QR
    + AWAITING_PICKUP - Waiting for user to confirm they have picked up their package
    + COMPLETED - Delivery has been completed
    + UNKNOWN - Error state
+ priority: `0` (number, required)
+ packageList (array[Package])

## PackageCore
+ name: `Blood sample` (required, string)
+ description: `Blood sample for patient Jane Doe` (string)
+ priority: 0 (number, required) - The lower, the higher the priority

## Package (PackageCore)
+ id: `11` (required, number)
+ from (required, Target)
+ to (required, Target)

## Target
+ id: `54` (required, number) - ID of the target
+ name: `Reception` (required, string) - Name of the target
+ description: `The first-floor reception in Block A` (string) - Description of the target
+ color: `red` (required, nullable) - Color of the target

## UserCore
+ id: `22` (required, number) - ID of the user
+ name: `Dr. John Smith` (required, string) - Name of the user

## User (UserCore)
+ username: `jsmith` (required, string)

## Instruction
+ instruction (enum) - Represents the type of instruction sent to the robot
    + MOVE - Orders the robot to move forward.
    + TURN - Orders the robot to turn. Payload denotes the target bearing, in degrees, from `-180` to `180`
+ value: `100` - Represents the payload associated with the instruction. Some instructions may ignore this payload.

## Correction
+ angle: `-10` (number, required) - New angular correction

## BadRequestError
+ code: `400` (number, required)
+ error: `Your request is malformed` (string, required)

## UnauthenticatedError
+ code: `401` (number, required)
+ error: `You must authenticate in order to access this resource` (string, required)

## ForbiddenError
+ code: `403` (number, required)
+ error: `You do not have permission to access this resource` (string, required)

## NoResourceError
+ code: `404` (number, required)
+ error: `The requested resource does not exist` (string, required)

# Group Deliveries
This resource group exposes the routes required by the app to access, modify, create and delete deliveries.

## All deliveries [/deliveries]
This resource collects data on deliveries.

### GET

+ Response 200

      + Attributes (array[Delivery])

### POST

This request takes in the IDs for the sender and recipient Users and the source and destination Targets and creates
a new delivery in the server.

The server responds with the newly created package object.

+ Request

      + Attributes (PackageCore)
          + from: `23` (required, number) - ID of departure Target
          + to: `12` (required, number) - ID of arrival Target
          + sender: `22` (required, number) - ID of sender User
          + recipient: `23` (required, number) - ID of recipient User

+ Response 200

      + Attributes (Delivery)

### Clear queue [DELETE]

+ Response 200

## Delivery [/delivery/{id}]

+ Parameters
    + id: `12` - ID of the delivery object being retrieved

### Get delivery information [GET]

+ Response 200

      + Attributes (Delivery)

+ Response 404

      + Attributes (BadRequestError)
          + friendly: `There's no delivery with that ID!`

### Partially update delivery [PATCH]
Partially updates the resource, replacing the supplied fields with the new ones.

Valid fields to update are: `state`.

+ Request with new state

      + Attributes
          + state: `IN_PROGRESS`

+ Response 200

      + Attributes (Delivery)

+ Response 400

      + Attributes (BadRequestError)
          + friendly: `Delivery object is malformed.`

+ Response 404

      + Attributes (NoResourceError)
          + friendly: `There's no delivery with that ID!`

### Delete delivery [DELETE]

+ Response 200

+ Response 404

      + Attributes (BadRequestError)
          + friendly: `There's no delivery with that ID!`

# Group Targets

## Targets [/targets]

### Get all targets [GET]

+ Response 200

    + Attributes (array[Target])

### Add target [POST]

+ Request

    + Attributes
        + name: `Dr. Jack's office` (string, required)
        + description (string, nullable)
        + color: `red` (string)

+ Response 200

    + Attributes (array[Target])

+ Response 400

    + Attributes (BadRequestError)
        + friendly: `Target information is badly formatted`

### Clear targets [DELETE]

+ Response 200

## Target [/target/{id}]

+ Parameters
    + id: `4` - ID of target

### Retrieve target [GET]

+ Response 200

    + Attributes (array[Target])

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `This target does not exist`

### Partially update target [PATCH]

+ Request update colour mapping

    + Attributes
        + color: `red` (string)

+ Response 200

    + Attributes (Target)

+ Response 400

    + Attributes (BadRequestError)
        + friendly: `Target information is badly formatted`

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `This target does not exist`

### Delete target [DELETE]

+ Response 200

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `This target does not exist`

# Group Authentication

## Login [/login]
Allows the user to login. Returns a bearer token if successful.

### POST

+ Request

      + Attributes
          + username: `jdoe` (required, string)
          + password: `password123` (required, string)

+ Response 200

      + Attributes
          + bearer: `c6e1f9d0-a241-4e29-8baa-2625f1e3a779`

+ Response 401

      + Attributes (UnauthenticatedError)
          + friendly: `Incorrect user/password combination`

## Register [/register]
Allows the user to register. Returns a bearer token if successful.

### POST

+ Request

      + Attributes
          + username: `jdoe` (required, string)
          + name: `Dr. John Doe` (required, string)
          + password: `password123` (required, string)

+ Response 200

      + Attributes
          + bearer: `c6e1f9d0-a241-4e29-8baa-2625f1e3a779`

+ Response 401

      + Attributes (UnauthenticatedError)
          + friendly: `Incorrect user/password combination`

# Group Robot
This resource group exposes the required routes for the vision system to interface with the robot.

## Instructions [/instructions{?limit}]
Exposes the current instruction issued to the robot, for reading or modification.

### Retrieve instruction queue [GET]

+ Response 200

    + Attributes (array[Instruction])

### Add instruction(s) to queue [POST]
Appends one or more instructions to the queue.

+ Request with a single instruction

    + Attributes (Instruction)

+ Request with multiple instructions

    + Attributes (array[Instruction])

+ Response 200

    + Attributes (array[Instruction])

### Clear entire instruction queue [DELETE]

+ Response 200

    + Attributes (array)

### Batch retrieval [GET /instructions/batch{?limit}]
Makes a single, batch retrieval of instructions (limited by a number) joined with the correction parameter, if any.
This route is mean to avoid the overhead of two requests being issued by the robot, seeing that it has very limited
connectivity capabilities.

+ Parameters
    + limit: `1` (number, optional) - The maximum number of instructions to return

+ Response 200

    + Attributes
        + target (array[Instruction])
        + correction
            + angle: `-10`

## Instruction [/instruction/{id}]
Exposes the current instruction issued to the robot, for reading or modification.

+ Parameters
    + id: `0` - Specifies the index of the instruction in the queue

### Retrieve instruction at index from queue [GET]
This route is meant to be polled by the robot.

+ Response 200

    + Attributes (Instruction)

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `This instruction does not exist`

### Remove instruction from queue [DELETE]
Removes this instruction from the queue. Meant to be used by the robot once an instruction has been completed.

+ Response 200

## Correction [/correction]
Exposes a mechanism to issue angle corrections to the robot.

### Retrieve correction [GET]

+ Response 200

    + Attributes (Correction)

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `No correction has been issued!`

### Issue a correction [POST]
Issues a new correction to the angle of the robot. If a correction has already been issued, returns an error.

+ Request

    + Attributes (Correction)

+ Response 200

    + Attributes (Correction)

+ Response 400

    + Attributes (BadRequestError)
        + friendly: `A correction has already been issued!`

### Delete correction [DELETE]
Should be used once the correction has been executed by the robot.

+ Response 200

+ Response 404

    + Attributes (NoResourceError)
        + friendly: `No correction has been issued!`

## Locking [/lock]
Exposes the state of the locking mechanism, for reading or modification.

### GET
Meant to be polled by the robot.

+ Response 200

    + Attributes
        + locked: `false` - Boolean value indicating whether the lock is engaged.

### POST
Updates the lock state.

+ Request

    + Attributes
        + locked: `false` - Boolean value indicating whether the lock is engaged.

+ Response 200

    + Attributes
        + locked: `false` - Boolean value indicating whether the lock is engaged.
